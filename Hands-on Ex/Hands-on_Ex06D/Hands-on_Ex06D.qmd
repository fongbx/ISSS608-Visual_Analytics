---
title: "Hands-on Exercise 6D"
subtitle: "Visual Multivariate Analysis with Parallel Coordinates Plot"
author: "Fong Bao Xian"
---

# Overview

Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by [Alfred Inselberg](http://www.math.tau.ac.il/~aiisreal/) in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations.

As pointed out by [Stephen Few](https://www.perceptualedge.com/articles/b-eye/parallel_coordinates.pdf)(2006), "This certainly isn't a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn't in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis." For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.

By the end of this hands-on exercise, we will gain hands-on experience on:

-   plotting statistic parallel coordinates plots by using *ggparcoord()* of **GGally** package,
-   plotting interactive parallel coordinates plots by using **parcoords** package, and
-   plotting interactive parallel coordinates plots by using **parallelPlot** package.

# Getting Started

## Install and Launch R Packages

For this exercise, the **GGally**, **parcoords**, **parallelPlot** and **tidyverse** packages will be used.

```{r}
pacman::p_load(GGally, parallelPlot, tidyverse)
```

## Import Data

In this hands-on exercise, the [World Happiness 2018](http://worldhappiness.report/ed/2018/) data will be used. The data set is download [here](https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls). The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called *WHData-2018.csv*.

In the code chunk below, `read_csv()` of **readr** package is used to import *WHData-2018.csv* into R and save it into a tibble data frame object called *wh*.

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

# Static Parallel Coordinates Plot

In this section, you will learn how to plot static parallel coordinates plot by using `ggparcoord()` of **GGally** package.

## Plotting a simple parallel coordinates plot

The code chunk below shows a typical syntax used to plot a basic static parallel coordinates plot using `ggparcoord()`.

```{r}
ggparcoord(data = wh,
           columns = c(3, 7:12))
```

::: callout-note
Notice that only two argument namely `data` and `columns` are used. `Data` argument is used to map the data object (i.e. *wh*) and `columns` is used to select the columns for preparing the parallel coordinates plot.
:::

## Plotting a parallel coordinates plot with boxplot

The basic parallel coordinates plot fails to reveal any meaning understanding of the World Happiness measures. In this section, we will learn how to makeover the plot by using a collection of arguments provided by `ggparcoord()`.

```{r}
ggparcoord(data = wh,
           columns = c(7:12),
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE,
           title = "Parallel Coordinates Plot of World Happiness Variables")
```

::: callout-note
-   `groupColumn` argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.
-   `scale` argument is used to scale the variables in the parallel coordinate plot by using `uniminmax` method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.
-   `alphaLines` argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.
-   `boxplot` argument is used to turn on the boxplot by using logical `TRUE`. The default is `FALSE`.
-   `title` argument is used to provide the parallel coordinates plot a title.
:::

## Plotting a parallel coordinates plot with facet

Since `ggparcoord()` is developed by extending **ggplot2** package, we can combine some of the ggplot2 functions when plotting a parallel coordinates plot.

In the code chunk below, `facet_wrap()` of **ggplot2** is used to plot 10 small multiple parallel coordinates plots. Each plot represents one geographical region such as East Asia.

```{r}
ggparcoord(data = wh,
           columns = c(7:12),
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE,
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~Region)
```

::: callout-note
One of the aesthetic defects of the current design is that some of the variable names overlap on x-axis.
:::

### Rotating x-axis text label

To make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using `theme()` function in ggplot2 as shown in the code chunk below.

```{r}
ggparcoord(data = wh,
           columns = c(7:12),
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE,
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~Region) +
  theme(axis.text.x = element_text(angle = 30))
```

### Adjusting the rotated x-axis text label

Rotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using `hjust` argument to theme's text element with `element_text()`. We use `axis.text.x` as we want to change the look of x-axis text.

```{r}
ggparcoord(data = wh,
           columns = c(7:12),
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE,
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~Region) +
  theme(axis.text.x = element_text(angle = 30, hjust = 1))
```

# Interactive Parallel Coordinates Plot: parallelPlot methods

[**parallelPlot**](https://cran.r-project.org/web/packages/parallelPlot/) is an R package specially designed to plot a parallel coordinates plot using 'htmlwidgets' package and [d3.js](https://d3js.org/). In this section, we will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.

## The basic plot

The code chunk below plots an interactive parallel coordinates plot by using `parallelPlot()`.

```{r}
parallelPlot(wh,
             width = 320,
             height = 400)
```

## Rotate axis label

Notice that in the previous plot, some of the axis labels are too long. We can use `rotateTitle` argument to avoid overlapping axis labels.

```{r}
parallelPlot(wh,
             width = 320,
             height = 400,
             rotateTitle = TRUE)
```

::: callout-note
One of the useful interactive feature of parallelPlot is that we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will show the different colour intensities based on the values of Happiness score.
:::

## Change the colour scheme

We can change the default blue colour scheme by using `continousCS` argument as shown in the code chunk below.

```{r}
parallelPlot(wh,
             continuousCS = "YlOrRd",
             rotateTitle = TRUE)
```

## Parallel coordinates plot with histogram

In the code chunk below, `histoVisibility` argument is used to plot histograms along the axis of each variable.

```{r}
histoVisibility <- rep(TRUE, ncol(wh))

parallelPlot(wh,
             rotateTitle = TRUE,
             histoVisibility = histoVisibility)
```

# References

-   [Visual Multivariate Analysis with Parallel Coordinates Plot](https://r4va.netlify.app/chap15.html)
-   [*ggparcoord()*](http://ggobi.github.io/ggally/reference/ggparcoord.html) of [**GGally**](http://ggobi.github.io/ggally/) package
-   [**parcoords** user guide](https://cran.r-project.org/web/packages/parcoords/parcoords.pdf)
-   [**parallelPlot**](https://cran.r-project.org/web/packages/parallelPlot/parallelPlot.pdf)

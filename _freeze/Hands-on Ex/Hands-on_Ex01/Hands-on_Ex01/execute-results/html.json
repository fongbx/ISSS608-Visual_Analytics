{
  "hash": "9697f14f1d2fbcc4be9c03580d6af7dc",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1\"\nsubtitle: \"Introduction to ggplot2\"\nauthor: \"Fong Bao Xian\"\n---\n\n\n# Overview\n\nIn this exercise, we will learn the basic principles and essential components of ggplot2, and gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics.\n\n# Getting Started\n\n## Install and Launch R packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n## Import Data\n\nWe will import `Exan_data.csv` into the R environment using `read_csv()` function of `readr` package. The dataset comprises of year end examination grades of a cohort of Primary 3 students.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv('data/Exam_data.csv')\n```\n:::\n\n\nWe will examine the imported data below.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [322 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID     : chr [1:322] \"Student321\" \"Student305\" \"Student289\" \"Student227\" ...\n $ CLASS  : chr [1:322] \"3I\" \"3I\" \"3H\" \"3F\" ...\n $ GENDER : chr [1:322] \"Male\" \"Female\" \"Male\" \"Male\" ...\n $ RACE   : chr [1:322] \"Malay\" \"Malay\" \"Chinese\" \"Chinese\" ...\n $ ENGLISH: num [1:322] 21 24 26 27 27 31 31 31 33 34 ...\n $ MATHS  : num [1:322] 9 22 16 77 11 16 21 18 19 49 ...\n $ SCIENCE: num [1:322] 15 16 16 31 25 16 25 27 15 37 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_character(),\n  ..   CLASS = col_character(),\n  ..   GENDER = col_character(),\n  ..   RACE = col_character(),\n  ..   ENGLISH = col_double(),\n  ..   MATHS = col_double(),\n  ..   SCIENCE = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n\n# Introduction to ggplot\n\n## Understand Grammer of Graphics\n\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics. Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers.\n\nThere are two principles in Grammar of Graphics, they are:\n\n-   Graphics = distinct layers of grammatical elements\n-   Meaningful plots through aesthetic mapping\n\nggplot2 is an implementation of Grammar of Graphics. A short description of each building block are as follows:\n\n-   **Data**: The dataset being plotted.\n-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\n-   **Geometrics**: The visual elements used for our data, such as point, bar or line.\n-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\n-   **Statistics**, statiscal transformations that summarise data (e.g. mean, confidence intervals).\n-   **Coordinate systems** define the plane on which data are mapped on the graphic.\n-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n![Reference: Hadley Wickham (2010) \\\"A layered grammar of graphics.\\\" Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3--28.](images/image.PNG)\n\n## Element: Data\n\nLet us call the `ggplot()` function using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n`ggplot()` initialises a ggplot object and a blank canvas appears. The data argument defines the dataset to be used for plotting.\n\n## Element: [Aesthetic mappings](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)\n\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\n\nAll aesthetics of a plot are specified in the [`aes()`](https://ggplot2.tidyverse.org/reference/aes.html) function call (in later part of this lesson, you will see that each *geom* layer can have its own aes specification)\n\nCode chunk below adds the aesthetic element into the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n`ggplot` includes the x-axis and the axis's label.\n\n## Element: Geom\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\n-   *geom_point* for drawing individual points (e.g., a scatter plot)\n-   *geom_line* for drawing lines (e.g., for a line charts)\n-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)\n-   *geom_bar* for drawing bars (e.g., for bar charts)\n-   *geom_histogram* for drawing binned values (e.g. a histogram)\n-   *geom_polygon* for drawing arbitrary shapes\n-   *geom_map* for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the **+** operator. For complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).\n\n### Geom_bar()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Geom_dotplot()\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nThe y-scale is not very useful, in fact misleading.\n:::\n\nWe will modify the chart using the below two steps:\n\n-   `scale_y_continuous()` is used to turn off the y-axis, and\n-   *binwidth argument* is used to change the binwidth to 2.5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize=0.5) +\n  scale_y_continuous(NULL,         # removes y-axis label\n                     breaks=NULL)  # removes y-axis ticks\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Geom_histogram()\n\nIn `geom_histogram()`, the default number of bins is 30.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Modify a geometric object by changing geom()\n\nIn the code chunk below,\n\n-   *bins* argument is used to change the number of bins to 20,\n\n-   *fill* argument is used to shade the histogram with light blue colour, and\n\n-   *colour* argument is used to change the outline colour of the bars in black\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Modify a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. *fill*) by using sub-group of *aesthetic()*.\n\n::: callout-note\nThis approach can be used to change colour, fill and alpha of the geometric.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bins=20,\n                 color='grey30')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Geom-density()\n\n[`geom-density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below plots two kernel density lines by using *colour* or *fill* arguments of `aes()`*.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS,\n           color=GENDER)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### Geom_boxplot()\n\n`geom_boxplot()` displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all \"outlying\" points individually.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n[**Notches**](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot(notch=TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### Geom_violin()\n\n`geom_violin` is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it's easier to compare several distributions since they're placed side by side.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### Geom_point()\n\n`geom_point()` is especially useful for creating scatterplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n### Combining geom objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  geom_point(position='jitter',\n             size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## Element: stat\n\nThe [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:\n\n-   frequency of values of a variable (bar graph)\n\n    -   a mean\n    -   a confidence limit\n\n-   There are two ways to use these functions:\n\n    -   add a `stat_()` function and override the default geom, or\n\n    -   add a `geom_()` function and override the default stat.\n\n### Working with stat()\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### Working with stat - the stat_summary() method\n\nThe code chunk below adds mean values by using [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html) function and overriding the default geom.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  stat_summary(geom='point',\n               fun='mean',\n               color='red',\n               size=4)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### Working with stat - the geom() method\n\nThe code chunk below adding mean values by using `geom_()` function and overriding the default stat.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS)) +\n  geom_boxplot() +\n  geom_point(stat='summary',\n             fun='mean',\n             color='red',\n             size=4)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### Adding a best fit curve on a scatterplot\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nIn the code chunk below, [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot.\n\n::: callout-note\nThe default method used is *loess*.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nThe default smoothing method can be overridden as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## Element: Facets\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html).\n\n### Working with facet_wrap()\n\n`facet_wrap` wraps a 1d sequence of panels into 2d. The default will display the panels in a grid shape (in this case 3x3) but we can pass in the arguments of `nrow` and `ncol` for customisation. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\nThe facet_wrap() function will only produce plots for the combinations of variables that have values, which means it won't produce any empty plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\nfacet_wrap(~ CLASS, nrow=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n### Working with facet_grid()\n\n`facet_grid()` forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data. Compared with `facet_wrap()`, we cannot specify the `nrow` and `ncol`, and there would always be only one row or only one column.\n\nThe facet_grid() function will also produce a grid of plots for each combination of variables that you specify, even if some plots are empty.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n## Element: Coordinates\n\nThe *Coordinates* functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out)\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot)\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps\n\n### Working with Coordinate\n\nBy default, the bar chart of ggplot2 is in vertical form.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n### Changing the x and y axis range\n\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below fixes both the y-axis and x-axis range from 0-100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n## Element: Themes\n\nThemes control elements of the graph not related to the data. For example:\n\n-   background colour\n-   size of fonts\n-   gridlines\n-   colour of labels\n\nBuilt-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`\n\nA list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n### Working with theme\n\nThe code chunk below plot a horizontal bar chart using `theme_gray()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nBelow plots the horizontal bar chart using `theme_classic()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nBelow plots the horizontal bar chart using `theme_m()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n# References\n\n-   [R for Visual Analytics](https://r4va.netlify.app/) - [A Layered Grammar of Graphics: ggplot2 methods](https://r4va.netlify.app/chap01.html)\n-   Hadley Wickham (2023) [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/). Online 3rd edition.\n-   Winston Chang (2013) [R Graphics Cookbook 2nd edition](https://r-graphics.org/). Online version.\n-   Healy, Kieran (2019) [Data Visualization: A practical introduction](https://socviz.co/). Online version\n-   [Learning ggplot2 on Paper -- Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)\n-   [Learning ggplot2 on Paper -- Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)\n-   [Learning ggplot2 on Paper -- Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)\n",
    "supporting": [
      "Hands-on_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}